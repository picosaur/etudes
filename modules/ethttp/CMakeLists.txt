cmake_minimum_required(VERSION 3.10.0)
project(ethttp)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

file(GLOB_RECURSE ETHTTP_SRC *.cpp *.h)
add_library(${PROJECT_NAME} ${ETHTTP_SRC})
target_include_directories (${PROJECT_NAME} PUBLIC .)

set(ETHTTP_BACKEND_LIST emscripten cpphttplib dummy)
set(trafficLight Green CACHE STRING "Status of something")
set_property(CACHE trafficLight PROPERTY STRINGS ${trafficLightColors})

if(ETHTTP_BACKEND MATCHES "EMSCRIPTEN")
    target_compile_definitions(${PROJECT_NAME} PUBLIC ETHTTP_USE_EMSCRIPTEN)
    target_link_options(${PROJECT_NAME} PUBLIC -sFETCH)
elseif(ETHTTP_BACKEND MATCHES "CPPHTTPLIB")
    target_compile_definitions(${PROJECT_NAME} PUBLIC ETHTTP_USE_CPPHTTPLIB)
    target_link_libraries(${PROJECT_NAME} PRIVATE httplib)
else()
    target_compile_definitions(${PROJECT_NAME} PUBLIC ETHTTP_USE_DUMMY)
endif()

# if (EMSCRIPTEN)
#     target_link_options(${CMAKE_PROJECT_NAME} PRIVATE -sUSE_GLFW=3 -sUSE_PTHREADS=1 -sALLOW_MEMORY_GROWTH=1)
#     target_link_options(${CMAKE_PROJECT_NAME} PRIVATE -sTOTAL_MEMORY=134217728)
#     target_link_options(${CMAKE_PROJECT_NAME} PRIVATE -sMAX_WEBGL_VERSION=2)
#     target_link_options(${CMAKE_PROJECT_NAME} PRIVATE -sEXPORTED_RUNTIME_METHODS=ccall)
#     target_link_options(${CMAKE_PROJECT_NAME} PRIVATE -sFETCH)
#     target_link_options(${CMAKE_PROJECT_NAME} PRIVATE -sWASM_BIGINT)
#     target_link_options(${CMAKE_PROJECT_NAME} PRIVATE -O1)
#     target_link_options(${CMAKE_PROJECT_NAME} PRIVATE -sLEGACY_GL_EMULATION)
#     target_link_options(${CMAKE_PROJECT_NAME} PRIVATE -fsanitize=null)
#     target_link_options(${CMAKE_PROJECT_NAME} PRIVATE -fsanitize-minimal-runtime)
#     target_link_libraries(${CMAKE_PROJECT_NAME} PRIVATE idbfs.js)
# endif ()

